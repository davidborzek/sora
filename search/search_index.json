{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"sora","text":"<p>sora is an experimental widget system, extendable and configurable using python and based on GTK3. You can create your own widgets in any window manager.</p> <p> Getting started</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li> Window</li> <li> Widgets</li> <li> Styling</li> <li> Bindable</li> </ul>"},{"location":"bindable/","title":"Bindable","text":"<p>Most properties of a widget are bindable. This means that you can pass a <code>Variable</code> to this property. A <code>Variable</code> can be used to update the value of the property.</p>"},{"location":"bindable/#variable","title":"Variable","text":"<p>You can create a manual <code>Variable</code> that is mutable and updates the value of the property when it is changed:</p> <pre><code>from sora.widgets.bind import Variable\n\nmy_variable = Variable(\"Hello World\")\n\nmy_variable.value = \"Hello World 2\"\n</code></pre>"},{"location":"bindable/#polling-variable","title":"Polling Variable","text":"<p>You can also create a <code>Variable</code> that polls a function and updates the value of the property when the function returns a new value:</p> <pre><code>from sora.widgets.bind import Variable\n\nmy_variable = Variable.interval(1, lambda: \"Hello World\")\n</code></pre>"},{"location":"bindable/#variableinterval","title":"Variable.interval","text":"<p>The <code>Variable.interval</code> method takes two arguments:</p> <ul> <li><code>interval</code>: <code>float</code>: The interval in seconds between each poll.</li> <li><code>func</code>: <code>Callable[[], T]</code>: The function that returns the value of the variable.</li> </ul>"},{"location":"bindable/#listening-variable","title":"Listening Variable","text":"<p>You can also create a <code>Variable</code> that runs a subprocess and updates the value of the property when the subprocess returns a new value:</p> <pre><code>from sora.widgets.bind import Variable\n\nmy_variable = Variable.listen([\"pactl\", \"subscribe\"])\n</code></pre>"},{"location":"bindable/#variablelisten","title":"Variable.listen","text":"<p>The <code>Variable.listen</code> method takes one argument:</p> <ul> <li><code>command</code>: <code>list[str] | str</code>: The command to run.</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>sora is configured using python and the configuration file is located at <code>$XDG_CONFIG_HOME/sora/config.py</code>. (usually <code>~/.config/sora/config.py</code>)</p> <p>You can specify the config directory using the <code>-c</code> flag.</p>"},{"location":"configuration/#quick-start","title":"Quick start","text":"<pre><code>from sora.widgets.label import Label, LabelProps\nfrom sora.window import Window\nfrom sora.geometry import Geometry\n\n# Create a new label widget.\nlabel = Label(\n    LabelProps(label=\"Hello, world!\", classnames=[\"label\"]),\n)\n\n# Create a new window with the label widget.\nwindow = Window(\n    name=\"Bar\",\n    monitor=0,\n    widget=label,\n    geometry=Geometry(\n        height=\"30px\",\n        width=\"100%\",\n    ),\n)\n\n# Export the window, so sora can use it.\n# Exported windows are visible by default.\nwindows = [window]\n</code></pre> <p>Follow this wiki page for more information about the configuration API.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#from-source","title":"From source","text":"<p>Prerequisites</p>  Ubuntu /  Debian Arch Linux Fedora <ul> <li><code>python3</code></li> <li><code>meson</code></li> <li><code>python3-gi</code></li> <li><code>gir1.2-gtk-3.0</code></li> <li><code>python3-libsass</code></li> </ul> <ul> <li><code>python</code></li> <li><code>meson</code></li> <li><code>gtk3</code></li> <li><code>python-gobject</code></li> <li><code>python-libsass</code><sup>AUR</sup></li> </ul> <ul> <li><code>python3</code></li> <li><code>meson</code></li> <li><code>python3-gobject</code></li> <li><code>gtk3</code></li> <li><code>python3-libsass</code></li> </ul> <pre><code>$ git clone https://github.com/davidborzek/sora.git\n$ cd sora\n$ meson setup --prefix=/usr builddir\n$ ninja -C builddir install\n</code></pre>"},{"location":"styling/","title":"Styling","text":""},{"location":"styling/#gtk-css","title":"GTK CSS","text":"<p>sora uses GTK CSS for styling. You can style your widgets using either CSS or Sass. GTK CSS is similar to Vanilla CSS, but does not support all CSS Properties. Checkout the Supported CSS Properties for more information.</p> <p>The styles are loaded from the config directory and sora looks for a <code>style.scss</code> or <code>style.css</code> file.</p>"},{"location":"styling/#gtk-debugger","title":"GTK Debugger","text":"<p>You can use the GTK Debugger to inspect the widgets and their properties.</p> <p>To start sora with the GTK Debugger, use the <code>--inspector</code> flag.</p> <pre><code>$ sora start --inspector\n</code></pre>"},{"location":"widgets/","title":"Widgets","text":""},{"location":"widgets/#base","title":"Base","text":"<p>All widgets inherit from the base widget class. So the following properties are available for all widgets.</p> <p>Properties</p> Property Type Description <code>name</code> <code>str</code> The name of the widget. <code>visible</code> <code>bool</code> Whether the widget is visible or not. <code>tooltip_text</code> <code>str</code> The tooltip text of the widget. <code>valign</code> <code>Gtk.Align</code> The vertical alignment of the widget. <code>halign</code> <code>Gtk.Align</code> The horizontal alignment of the widget. <code>vexpand</code> <code>bool</code> Whether the widget should expand vertically or not. <code>hexpand</code> <code>bool</code> Whether the widget should expand horizontally or not. <code>sensitive</code> <code>bool</code> Whether the widget is sensitive or not. <code>classnames</code> <code>list[str]</code>, <code>str</code> CSS class names of the widget. <code>cursor</code> <code>Cursor</code> The cursor of the widget. This only works for widgets that receives hover events (e.g. EventBox or Button)."},{"location":"widgets/#box","title":"Box","text":"<p>A layout container that can contain multiple widgets.</p> <p>Properties</p> Property Type Description <code>spacing</code> <code>int</code> The spacing between widgets. <code>orientation</code> <code>Gtk.Orientation</code> The orientation of the box. <code>homogeneous</code> <code>bool</code> Whether the box should be homogeneous or not. <code>children</code> <code>list[Gtk.Widget]</code> The children of the box. <p>Example</p> <pre><code>from sora.widgets.box import Box, BoxProps\nfrom gi.repository import Gtk\n\nbox = Box(\n    BoxProps(\n        spacing=10,\n        orientation=Gtk.Orientation.VERTICAL,\n        homogeneous=True,\n        children=[\n            # Add other widgets here.\n        ],\n    ),\n)\n</code></pre>"},{"location":"widgets/#button","title":"Button","text":"<p>A button widget.</p> <p>Properties</p> Property Type Description <code>label</code> <code>str</code> The label of the button. <code>on_click</code> <code>Callable[[], None]</code> The callback that is called when the button is clicked. <code>on_middle_click</code> <code>Callable[[], None]</code> The callback that is called when the button is middle clicked. <code>on_right_click</code> <code>Callable[[], None]</code> The callback that is called when the button is right clicked. <p>Example</p> <pre><code>from sora.widgets.button import Button, ButtonProps\n\nbutton = Button(\n    ButtonProps(\n        label=\"Click me!\",\n        on_click=lambda: print(\"Clicked!\"),\n        on_middle_click=lambda: print(\"Middle clicked!\"),\n        on_right_click=lambda: print(\"Right clicked!\"),\n    ),\n)\n</code></pre>"},{"location":"widgets/#centerbox","title":"CenterBox","text":"<p>A box that must contain exactly three children, which will be placed at the start, center and end of the box.</p> <p>Properties</p> Property Type Description <code>start</code> <code>Gtk.Widget</code> The start child of the box. <code>center</code> <code>Gtk.Widget</code> The center child of the box. <code>end</code> <code>Gtk.Widget</code> The end child of the box. <p>Example</p> <pre><code>from sora.widgets.centerbox import CenterBox, CenterBoxProps\n\ncenterbox = CenterBox(\n    CenterBoxProps(\n        start=Label(LabelProps(label=\"Start\")),\n        center=Label(LabelProps(label=\"Center\")),\n        end=Label(LabelProps(label=\"End\")),\n    ),\n)\n</code></pre>"},{"location":"widgets/#eventbox","title":"EventBox","text":"<p>A widget that can receive events and must contain exactly one child.</p> <p>Properties</p> Property Type Description <code>child</code> <code>Gtk.Widget</code> The child of the event box. <code>on_hover</code> <code>Callable[[], None]</code> The callback that is called when the event box is hovered. <code>on_hover_lost</code> <code>Callable[[], None]</code> The callback that is called when the event box is unhovered. <code>on_scroll</code> <code>Callable[[ScrollDirection], None]</code> The callback that is called when the event box is scrolled. <code>on_click</code> <code>Callable[[], None]</code> The callback that is called when the event box is clicked. <code>on_middle_click</code> <code>Callable[[], None]</code> The callback that is called when the event box is middle clicked. <code>on_right_click</code> <code>Callable[[], None]</code> The callback that is called when the event box is right clicked. <p>Note: Supports <code>:hover</code> and <code>:active</code> CSS pseudo classes.</p> <p>Example</p> <pre><code>from sora.widgets.eventbox import EventBox, EventBoxProps\n\neventbox = EventBox(\n    EventBoxProps(\n        child=Label(LabelProps(label=\"Hover or click me!\")),\n        on_hover=lambda: print(\"Hovered!\"),\n        on_hover_lost=lambda: print(\"Unhovered!\"),\n        on_scroll=lambda direction: print(f\"Scrolled {direction}!\"),\n        on_click=lambda: print(\"Clicked!\"),\n        on_middle_click=lambda: print(\"Middle clicked!\"),\n        on_right_click=lambda: print(\"Right clicked!\"),\n    ),\n)\n</code></pre>"},{"location":"widgets/#scrolldirection","title":"ScrollDirection","text":"<p>The direction of a scroll event.</p> <ul> <li><code>UP</code></li> <li><code>DOWN</code></li> <li><code>LEFT</code></li> <li><code>RIGHT</code></li> </ul>"},{"location":"widgets/#label","title":"Label","text":"<p>A label widget.</p> <p>Properties</p> Property Type Description <code>label</code> <code>str</code> The text of the label. <code>justify</code> <code>Gtk.Justification</code> The justification of the label. <code>wrap</code> <code>bool</code> Whether the label should wrap or not. <code>angle</code> <code>float</code> The angle of the label. <code>xalign</code> <code>float</code> The horizontal alignment of the label. <code>yalign</code> <code>float</code> The vertical alignment of the label. <p>Example</p> <pre><code>from sora.widgets.label import Label, LabelProps\nfrom gi.repository import Gtk\n\nlabel = Label(\n    LabelProps(\n        label=\"Hello, world!\",\n        justify=Gtk.Justification.CENTER,\n        wrap=True,\n        angle=45,\n        xalign=0.5,\n        yalign=0.5,\n    ),\n)\n</code></pre>"},{"location":"widgets/#revealer","title":"Revealer","text":"<p>A widget that can reveal its child.</p> <p>Properties</p> Property Type Description <code>reveal_child</code> <code>bool</code> Whether the child is revealed or not. <code>transition_duration</code> <code>int</code> The duration of the transition in milliseconds. <code>transition_type</code> <code>Gtk.RevealerTransitionType</code> The type of the transition. <code>child</code> <code>Gtk.Widget</code> The child of the revealer. <p>Example</p> <pre><code>from sora.widgets.revealer import Revealer, RevealerProps\n\nrevealer = Revealer(\n    RevealerProps(\n        reveal_child=True,\n        transition_duration=500,\n        transition_type=Gtk.RevealerTransitionType.CROSSFADE,\n        child=Label(LabelProps(label=\"Hello, world!\")),\n    ),\n)\n</code></pre>"},{"location":"widgets/#slider","title":"Slider","text":"<p>A slider widget.</p> <p>Properties</p> Property Type Description <code>orientation</code> <code>Gtk.Orientation</code> The orientation of the slider. <code>inverted</code> <code>bool</code> Whether the slider is inverted. <code>max</code> <code>float</code> The maximum value of the slider. <code>min</code> <code>float</code> The minimum value of the slider. <code>step</code> <code>float</code> The step of the slider. <code>value</code> <code>float</code> The value of the slider. <code>draw_value</code> <code>bool</code> Whether the value is drawn. <code>round_digits</code> <code>int</code> The number of digits to round to. <code>marks</code> <code>list[list[tuple[float, Gtk.PositionType, str]]]</code> The marks of the slider. <code>scrollable</code> <code>bool</code> Whether the slider is scrollable. <code>on_change</code> <code>Callable[[float], None]</code> The callback that is called when the slider value is changed. <p>Example</p> <pre><code>from sora.widgets.slider import Slider, SliderProps\nfrom gi.repository import Gtk\n\nslider = Slider(\n    SliderProps(\n        orientation=Gtk.Orientation.VERTICAL,\n        inverted=True,\n        max=100,\n        min=0,\n        step=1,\n        value=50,\n        draw_value=True,\n        round_digits=0,\n        marks=[\n            [\n                (0, Gtk.PositionType.TOP, \"0\"),\n                (50, Gtk.PositionType.TOP, \"50\"),\n                (100, Gtk.PositionType.TOP, \"100\"),\n            ]\n        ],\n        scrollable=True,\n        on_change=lambda value: print(f\"Value changed to {value}!\"),\n    ),\n)\n</code></pre>"},{"location":"widgets/#stack","title":"Stack","text":"<p>A stack widget.</p> <p>Properties</p> Property Type Description <code>transition_type</code> <code>Gtk.StackTransitionType</code> The type of the transition. <code>transition_duration</code> <code>int</code> The duration of the transition in milliseconds. <code>items</code> <code>dict[Gtk.Widget]</code> A dictionary of child widgets to add to the stack. <code>visible_child_name</code> <code>str</code> The name of the visible child. <code>vhomogeneous</code> <code>bool</code> Whether the stack should be homogeneous or not. <code>hhomogeneous</code> <code>bool</code> Whether the stack should be homogeneous or not. <p>Example</p> <pre><code>from sora.widgets.stack import Stack, StackProps\n\nstack = Stack(\n    StackProps(\n        transition_type=Gtk.StackTransitionType.CROSSFADE,\n        transition_duration=500,\n        items={\n            \"page1\": Label(LabelProps(label=\"Page 1\")),\n            \"page2\": Label(LabelProps(label=\"Page 2\")),\n        },\n        visible_child_name=\"page1\",\n        vhomogeneous=True,\n        hhomogeneous=True,\n    ),\n)\n</code></pre>"},{"location":"window/","title":"Window","text":""},{"location":"window/#window","title":"Window","text":"<p>A window defines a window on the screen, which can contain a single widget.</p> <p>Properties</p> Property Type Description <code>name</code> <code>str</code> The name of the window. <code>widget</code> <code>str</code> The widget to display in the window. <code>monitor</code> <code>int</code> or <code>str</code> The monitor to display the window on. This can be either the index of the monitor, or the name of the monitor. <code>wm_ignore</code> <code>bool</code> Whether the window manager should ignore (reserve space for) the window. <code>geometry</code> <code>Geometry</code> The geometry of the window. <code>window_type</code> <code>WindowType</code> The type of the window. <p>Example</p> <pre><code>from sora.window import Window, WindowType\nfrom sora.geometry import Geometry\nfrom sora.widgets.label import Label, LabelProps\n\nwindow = Window(\n    name=\"My Window\",\n    widget=Label(LabelProps(label=\"Hello, world!\")),\n    monitor=0,\n    wm_ignore=True,\n    geometry=Geometry(x=\"50%\", y=\"50%\", width=\"100px\", height=\"100px\"),\n    window_type=WindowType.DOCK,\n)\n</code></pre>"},{"location":"window/#geometry","title":"Geometry","text":"<p>The geometry of a window.</p> <p>Properties</p> Property Type Description <code>x</code> <code>str</code> The x position of the window. <code>y</code> <code>str</code> The y position of the window. <code>width</code> <code>str</code> The width of the window. <code>height</code> <code>str</code> The height of the window. <p>Note: The values of the geometry properties are strings, because they can be either absolute values (e.g. <code>100px</code>) or relative values (e.g. <code>50%</code>).</p>"},{"location":"window/#windowtype","title":"WindowType","text":"<p>The type of a window. This specifies <code>_NET_WM_WINDOW_TYPE</code> on X11.</p> <ul> <li><code>DOCK</code></li> <li><code>NORMAL</code></li> <li><code>DIALOG</code></li> <li><code>TOOLBAR</code></li> <li><code>UTILITY</code></li> <li><code>DESKTOP</code></li> <li><code>NOTIFICATION</code></li> </ul>"}]}